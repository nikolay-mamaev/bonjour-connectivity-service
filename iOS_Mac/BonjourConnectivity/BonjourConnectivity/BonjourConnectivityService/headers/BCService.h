//
//  BCService.h
//  BonjourConnectivityService
//
//  Created by Nikolay Mamaev on 6/1/13.
//  Copyright (c) 2013 Nikolay Mamaev. All rights reserved.
//


#import <Foundation/Foundation.h>
#import "BCDevice.h"
#import "BCTypes.h"


#pragma mark - Constants
extern NSString* const kNetServiceType;


@class BCService;


#pragma mark - BCServiceDelegate protocol declaration

@protocol BCServiceDelegate

@optional

#pragma mark General methods
// Called if hosting device name changed automatically (happens if there is another
// BonjourConnectivityService device with the same name is presented in the network
- (void)bonjourConnectivityService:(BCService*)service
    didChangeHostingDeviceName:(NSString*)newDeviceName;

// After this call, then hosting device is unable to receive data from other BonjourConnectivityService
// devices until bonjourConnectivityServiceDidPublish: is called again
- (void)bonjourConnectivityServiceDidStop:(BCService*)service;

#pragma mark Publishing
// If called, then hosting device is ready to receive data from other BonjourConnectivityService devices
- (void)bonjourConnectivityServiceDidPublish:(BCService*)service;

// If called, then hosting device can't receive data from other BonjourConnectivityService devices
- (void)bonjourConnectivityService:(BCService*)service
     didFailToPublishWithError:(NSNetServicesError)error;

#pragma mark Observing
- (void)bonjourConnectivityServiceWillStartObserving:(BCService*)service;
- (void)bonjourConnectivityServiceDidStopObserving:(BCService*)service;

// Called each time when BCService finds another devices with BonjourConnectivityService app ('devices'
// array's elements are of BCDevice class)
- (void)bonjourConnectivityService:(BCService*)service
             didObserveDevices:(NSArray*)devices;

// Called each time when BCService finds that a previously observed devices with BonjourConnectivityService
// app have disappeared ('devices' array's elements are of BCDevice class)
- (void)bonjourConnectivityService:(BCService*)service
              didRemoveDevices:(NSArray*)devices;

#pragma mark Connecting
- (void)bonjourConnectivityService:(BCService*)service
            didConnectToDevice:(BCDevice*)device;

- (void)bonjourConnectivityService:(BCService*)service
      didFailToConnectToDevice:(BCDevice*)device
                     withError:(BCServiceResult)errorCode;

- (void)bonjourConnectivityService:(BCService *)service
       didDisconnectFromDevice:(BCDevice *)device;

#pragma mark Receiving
// Called when another device with BonjourConnectivityService app sends data to this device
- (void)bonjourConnectivityService:(BCService*)service
              didReceiveString:(NSString*)string
                    fromDevice:(BCDevice*)device;

- (void)bonjourConnectivityService:(BCService*)service
     failedToReceiveFromDevice:(BCDevice*)device
                     withError:(BCServiceResult)errorCode;

#pragma mark Sharing
// Called in response to BCService's shareData:ofType:toDevice: method
- (void)bonjourConnectivityService:(BCService*)service
            didShareWithDevice:(BCDevice*)device
                    withResult:(BCServiceResult)result;

@end


#pragma mark - BCService interface declaration
@interface BCService : NSObject

// App's UI must set this property
@property (nonatomic, weak) id<BCServiceDelegate, NSObject> delegate;

// Array containing BCDevice's. This array represents all devices found at the moment
@property (atomic, readonly, strong) NSArray* observedDevices;

@property (nonatomic, readonly, strong) BCDevice* connectedDevice;

// Arguments:
// - deviceName: Any string which will identify this (hosting) device on other devices
//               with BonjourConnectivityService app (in their list of devices)
// - uniqueId:   UUID generated by the app's UI
- (id)initWithDelegate:(id<BCServiceDelegate, NSObject>)delegate withDeviceName:(NSString*)deviceName;

- (void)startObserving;
- (void)stopObserving;

- (void)connectToDevice:(BCDevice*)device;
- (void)disconnectFromConnectedDevice;
- (void)shareString:(NSString*)string;  // If need to share a data, please encode it with Base64

@end
